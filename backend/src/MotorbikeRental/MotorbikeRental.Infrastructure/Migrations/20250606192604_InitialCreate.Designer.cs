// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorbikeRental.Infrastructure.Data.Contexts;

#nullable disable

namespace MotorbikeRental.Infrastructure.Migrations
{
    [DbContext(typeof(MotorbikeRentalDbContext))]
    [Migration("20250606192604_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Contract.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ContractIndemnity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.HasIndex("DiscountId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Contract.RentalContract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpectedReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IdCardHeld")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LateReturnFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LateReturnFeeMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MotorbikeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RentalContractStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RentalDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("RentalTypeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ContractId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MotorbikeId");

                    b.ToTable("RentalContract", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Incidents.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentId"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DamageCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<int?>("MotorbikeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ReportedByEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IncidentId");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.HasIndex("MotorbikeId");

                    b.HasIndex("ReportedByEmployeeId");

                    b.ToTable("Incident", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Incidents.IncidentImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("IncidentId");

                    b.ToTable("IncidentImage", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Pricing.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("DiscountId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Pricing.PriceList", b =>
                {
                    b.Property<int>("PriceListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceListId"));

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MotorbikeId")
                        .HasColumnType("int");

                    b.HasKey("PriceListId");

                    b.HasIndex("MotorbikeId")
                        .IsUnique();

                    b.ToTable("PriceList", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.User.Employee", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CredentialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.User.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.User.UserCredentials", b =>
                {
                    b.Property<int>("CredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CredentialId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("UserCredentials", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Vehicles.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Vehicles.MaintenanceRecord", b =>
                {
                    b.Property<int>("MaintenanceRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceRecordId"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaintenanceTypeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MotorbikeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MaintenanceRecordId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MotorbikeId");

                    b.ToTable("MaintenanceRecord", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Vehicles.Motorbike", b =>
                {
                    b.Property<int>("MotorbikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MotorbikeId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EngineCapacity")
                        .HasColumnType("int");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("Mileage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MotorbikeConditionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotorbikeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("MotorbikeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Motorbike", (string)null);
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Contract.Payment", b =>
                {
                    b.HasOne("MotorbikeRental.Domain.Entities.Contract.RentalContract", "RentalContract")
                        .WithOne("Payments")
                        .HasForeignKey("MotorbikeRental.Domain.Entities.Contract.Payment", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MotorbikeRental.Domain.Entities.Pricing.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MotorbikeRental.Domain.Entities.User.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Employee");

                    b.Navigation("RentalContract");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Contract.RentalContract", b =>
                {
                    b.HasOne("MotorbikeRental.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("RentalContracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MotorbikeRental.Domain.Entities.User.Employee", "Employee")
                        .WithMany("RentalContracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotorbikeRental.Domain.Entities.Vehicles.Motorbike", "Motorbike")
                        .WithMany("RentalContracts")
                        .HasForeignKey("MotorbikeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Motorbike");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Incidents.Incident", b =>
                {
                    b.HasOne("MotorbikeRental.Domain.Entities.Contract.RentalContract", "RentalContract")
                        .WithOne("Incident")
                        .HasForeignKey("MotorbikeRental.Domain.Entities.Incidents.Incident", "ContractId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MotorbikeRental.Domain.Entities.Vehicles.Motorbike", "Motorbike")
                        .WithMany("Incidents")
                        .HasForeignKey("MotorbikeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MotorbikeRental.Domain.Entities.User.Employee", "ReportedByEmployee")
                        .WithMany("Incidents")
                        .HasForeignKey("ReportedByEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Motorbike");

                    b.Navigation("RentalContract");

                    b.Navigation("ReportedByEmployee");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Incidents.IncidentImage", b =>
                {
                    b.HasOne("MotorbikeRental.Domain.Entities.Incidents.Incident", "Incident")
                        .WithMany("Images")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Pricing.Discount", b =>
                {
                    b.HasOne("MotorbikeRental.Domain.Entities.Vehicles.Category", "Category")
                        .WithOne("Discount")
                        .HasForeignKey("MotorbikeRental.Domain.Entities.Pricing.Discount", "CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Pricing.PriceList", b =>
                {
                    b.HasOne("MotorbikeRental.Domain.Entities.Vehicles.Motorbike", "Motorbike")
                        .WithOne("PriceList")
                        .HasForeignKey("MotorbikeRental.Domain.Entities.Pricing.PriceList", "MotorbikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorbike");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.User.Employee", b =>
                {
                    b.HasOne("MotorbikeRental.Domain.Entities.User.Roles", "Roles")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.User.UserCredentials", b =>
                {
                    b.HasOne("MotorbikeRental.Domain.Entities.User.Employee", "Employee")
                        .WithOne("UserCredentials")
                        .HasForeignKey("MotorbikeRental.Domain.Entities.User.UserCredentials", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Vehicles.MaintenanceRecord", b =>
                {
                    b.HasOne("MotorbikeRental.Domain.Entities.User.Employee", "Employee")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorbikeRental.Domain.Entities.Vehicles.Motorbike", "Motorbike")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("MotorbikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Motorbike");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Vehicles.Motorbike", b =>
                {
                    b.HasOne("MotorbikeRental.Domain.Entities.Vehicles.Category", "Category")
                        .WithMany("Motorbikes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Contract.RentalContract", b =>
                {
                    b.Navigation("Incident")
                        .IsRequired();

                    b.Navigation("Payments")
                        .IsRequired();
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Customers.Customer", b =>
                {
                    b.Navigation("RentalContracts");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Incidents.Incident", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.User.Employee", b =>
                {
                    b.Navigation("Incidents");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("RentalContracts");

                    b.Navigation("UserCredentials")
                        .IsRequired();
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.User.Roles", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Vehicles.Category", b =>
                {
                    b.Navigation("Discount")
                        .IsRequired();

                    b.Navigation("Motorbikes");
                });

            modelBuilder.Entity("MotorbikeRental.Domain.Entities.Vehicles.Motorbike", b =>
                {
                    b.Navigation("Incidents");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("PriceList")
                        .IsRequired();

                    b.Navigation("RentalContracts");
                });
#pragma warning restore 612, 618
        }
    }
}
